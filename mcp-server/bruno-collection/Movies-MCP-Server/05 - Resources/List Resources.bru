meta {
  name: List Resources
  type: http
  seq: 1
}

post {
  url: {{base_url}}/mcp
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  Accept: application/json
}

body:json {
  {
    "jsonrpc": "2.0",
    "id": 30,
    "method": "resources/list",
    "params": {}
  }
}

tests {
  test("Status code is 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is valid JSON-RPC", function() {
    expect(res.getBody()).to.have.property('jsonrpc', '2.0');
    expect(res.getBody()).to.have.property('id', 30);
    expect(res.getBody()).to.have.property('result');
  });
  
  test("Resources list returned", function() {
    const result = res.getBody().result;
    expect(result).to.have.property('resources');
    expect(result.resources).to.be.an('array');
  });
  
  test("Movie resources present", function() {
    const result = res.getBody().result;
    const movieResources = result.resources.filter(r => r.uri.startsWith('movie://'));
    expect(movieResources.length).to.be.greaterThan(0);
  });
}

docs {
  # List Resources
  
  Lists all available resources in the MCP server. Each movie is exposed as a resource
  that can be read individually.
  
  ## Parameters
  None required.
  
  ## Expected Response
  
  ```json
  {
    "jsonrpc": "2.0",
    "id": 30,
    "result": {
      "resources": [
        {
          "uri": "movie://1",
          "name": "The Matrix (1999)",
          "description": "Movie: The Matrix - A computer programmer discovers that reality as he knows it is not real.",
          "mimeType": "application/json"
        },
        {
          "uri": "movie://2", 
          "name": "The Godfather (1972)",
          "description": "Movie: The Godfather - The aging patriarch of an organized crime dynasty transfers control to his reluctant son.",
          "mimeType": "application/json"
        }
      ]
    }
  }
  ```
}