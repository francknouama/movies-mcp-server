meta {
  name: Ping
  type: http
  seq: 2
}

post {
  url: {{base_url}}/mcp
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  Accept: application/json
}

body:json {
  {
    "jsonrpc": "2.0",
    "id": 2,
    "method": "ping",
    "params": {}
  }
}

tests {
  test("Status code is 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is valid JSON-RPC", function() {
    expect(res.getBody()).to.have.property('jsonrpc', '2.0');
    expect(res.getBody()).to.have.property('id', 2);
    expect(res.getBody()).to.have.property('result');
  });
  
  test("Ping response is empty object", function() {
    const result = res.getBody().result;
    expect(result).to.deep.equal({});
  });
}

docs {
  # Ping Server
  
  This request pings the MCP server to verify connectivity and responsiveness.
  
  ## Expected Response
  
  ```json
  {
    "jsonrpc": "2.0",
    "id": 2,
    "result": {}
  }
  ```
}