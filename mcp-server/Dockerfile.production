# ==============================================================================
# Multi-stage Production Dockerfile with Security Hardening
# ==============================================================================

# Security scanner stage
FROM aquasec/trivy:latest AS security-scanner
WORKDIR /scan
COPY go.mod go.sum ./
RUN trivy fs --exit-code 0 --severity HIGH,CRITICAL .

# Build stage with security
FROM golang:1.23-alpine AS builder

# Install security updates and minimal dependencies
RUN apk update && \
    apk upgrade && \
    apk add --no-cache git ca-certificates tzdata && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN adduser -D -g '' -s /bin/sh -u 1001 appuser

# Set security-focused build environment
ENV CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64 \
    GO111MODULE=on \
    GOSUMDB=sum.golang.org

WORKDIR /build

# Copy dependency files for layer caching
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# Copy source with proper ownership
COPY --chown=appuser:appuser . .

# Build with security flags and optimizations
ARG VERSION=unknown
ARG BUILD_TIME=unknown
ARG GIT_COMMIT=unknown

RUN go build \
    -a -installsuffix cgo \
    -ldflags="-s -w -extldflags '-static' \
             -X main.version=${VERSION} \
             -X main.buildTime=${BUILD_TIME} \
             -X main.gitCommit=${GIT_COMMIT}" \
    -tags netgo,osusergo \
    -trimpath \
    -o movies-mcp-server \
    ./cmd/server

# Verify the binary
RUN ldd movies-mcp-server 2>&1 | grep -q "not a dynamic executable" || exit 1

# Security scan the built binary
FROM aquasec/trivy:latest AS binary-scanner
COPY --from=builder /build/movies-mcp-server /scan/
RUN trivy fs --exit-code 0 /scan/

# ==============================================================================
# Final production stage
FROM scratch

# Metadata
LABEL org.opencontainers.image.title="Movies MCP Server" \
      org.opencontainers.image.description="Secure Model Context Protocol server for movie database operations" \
      org.opencontainers.image.vendor="Your Organization" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_TIME}" \
      org.opencontainers.image.revision="${GIT_COMMIT}" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.documentation="https://github.com/your-org/movies-mcp-server" \
      security.scan.passed="true"

# Copy minimal runtime dependencies
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Copy binary with proper ownership
COPY --from=builder --chown=1001:1001 /build/movies-mcp-server /usr/local/bin/movies-mcp-server
COPY --from=builder --chown=1001:1001 /build/migrations /migrations

# Security configurations
ENV PATH=/usr/local/bin \
    TZ=UTC \
    GO_ENV=production \
    USER=appuser \
    UID=1001 \
    GID=1001

# Use non-root user
USER 1001:1001

# Health check with timeout
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD ["/usr/local/bin/movies-mcp-server", "-health-check"]

# Security: No exposed ports (MCP uses stdin/stdout)
# Monitoring port can be exposed via docker run -p if needed

ENTRYPOINT ["/usr/local/bin/movies-mcp-server"]
CMD []