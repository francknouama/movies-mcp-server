package integration

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"log"
	"os"
	"strings"
	"testing"
	"time"

	_ "github.com/lib/pq"

	"movies-mcp-server/internal/composition"
	"movies-mcp-server/internal/interfaces/dto"
	"movies-mcp-server/internal/server"
)

// Integration tests for the entire MCP server with clean architecture
// These tests require a PostgreSQL database connection
//
// NOTE: These tests are currently outdated and need to be updated to work
// with the new server architecture (post-reorganization).
// The server package has been reorganized to use dependency injection
// and pure MCP protocol handling, so these tests need corresponding updates.

func setupIntegrationTest(t *testing.T) (*sql.DB, *composition.Container) {
	if testing.Short() {
		t.Skip("skipping integration test")
	}

	dbURL := os.Getenv("TEST_DATABASE_URL")
	if dbURL == "" {
		t.Skip("TEST_DATABASE_URL not set, skipping integration tests")
	}

	db, err := sql.Open("postgres", dbURL)
	if err != nil {
		t.Fatalf("Failed to connect to test database: %v", err)
	}

	if err := db.Ping(); err != nil {
		t.Fatalf("Failed to ping test database: %v", err)
	}

	// Clean up test data
	cleanupTestData(t, db)

	// Create dependency container
	container := composition.NewContainer(db)

	return db, container
}

// Helper function to send a request and get the response
func sendRequestAndGetResponse(t *testing.T, container *composition.Container, request dto.JSONRPCRequest) dto.JSONRPCResponse {
	// Create input and output buffers for this specific request
	input := &bytes.Buffer{}
	output := &bytes.Buffer{}
	
	// Create a new server instance with our buffers
	logger := log.New(&bytes.Buffer{}, "[TEST] ", log.LstdFlags)
	srv := server.NewMCPServer(input, output, logger, container)
	
	// Marshal and send the request
	requestData, err := json.Marshal(request)
	if err != nil {
		t.Fatalf("Failed to marshal request: %v", err)
	}
	
	input.WriteString(string(requestData) + "\n")
	
	// Process one request by running the server briefly
	go func() {
		srv.Run()
	}()
	
	// Give it a moment to process
	// For a more robust solution, we could use channels or other synchronization
	// but this is sufficient for testing
	time.Sleep(10 * time.Millisecond)
	
	// Parse the response
	outputData := output.String()
	if outputData == "" {
		t.Fatal("No response received from server")
	}
	
	var response dto.JSONRPCResponse
	if err := json.Unmarshal([]byte(outputData), &response); err != nil {
		t.Fatalf("Failed to parse response: %v (output: %s)", err, outputData)
	}
	
	return response
}

func cleanupTestData(t *testing.T, db *sql.DB) {
	queries := []string{
		"DELETE FROM movie_actors",
		"DELETE FROM movies",
		"DELETE FROM actors",
	}
	
	for _, query := range queries {
		if _, err := db.Exec(query); err != nil {
			t.Logf("Warning: failed to clean up with query %s: %v", query, err)
		}
	}
}

func TestServerIntegration_Initialize(t *testing.T) {
	t.Skip("Integration test needs to be updated for new server architecture")
	_, container := setupIntegrationTest(t)
	
	// Test initialize request
	request := dto.JSONRPCRequest{
		JSONRPC: "2.0",
		ID:      1,
		Method:  "initialize",
		Params:  json.RawMessage(`{"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "test-client", "version": "1.0.0"}}`),
	}
	
	response := sendRequestAndGetResponse(t, container, request)
	
	// Verify response
	if response.Error != nil {
		t.Errorf("Expected no error, got: %v", response.Error)
	}
	
	// Check result structure
	result, ok := response.Result.(map[string]interface{})
	if !ok {
		t.Fatalf("Expected result to be an object")
	}
	
	if result["protocolVersion"] != "2024-11-05" {
		t.Errorf("Expected protocolVersion 2024-11-05, got %v", result["protocolVersion"])
	}
	
	serverInfo, ok := result["serverInfo"].(map[string]interface{})
	if !ok {
		t.Fatalf("Expected serverInfo to be an object")
	}
	
	if serverInfo["name"] != "movies-mcp-server" {
		t.Errorf("Expected server name movies-mcp-server, got %v", serverInfo["name"])
	}
	
	if serverInfo["version"] != "1.0.0" {
		t.Errorf("Expected version 1.0.0, got %v", serverInfo["version"])
	}
}

func TestServerIntegration_ToolsList(t *testing.T) {
	t.Skip("Integration test needs to be updated for new server architecture")
	_, srv := setupIntegrationTest(t)
	
	// Test tools/list request
	request := dto.JSONRPCRequest{
		JSONRPC: "2.0",
		ID:      json.RawMessage(`1`),
		Method:  "tools/list",
		Params:  json.RawMessage(`{}`),
	}
	
	var output bytes.Buffer
	srv.SetOutput(&output)
	
	srv.HandleRequest(&request)
	
	// Parse response
	var response dto.JSONRPCResponse
	err := json.Unmarshal(output.Bytes(), &response)
	if err != nil {
		t.Fatalf("Failed to parse response: %v", err)
	}
	
	// Verify response
	if response.Error != nil {
		t.Errorf("Expected no error, got: %v", response.Error)
	}
	
	// Check result structure
	result, ok := response.Result.(map[string]interface{})
	if !ok {
		t.Fatalf("Expected result to be an object")
	}
	
	tools, ok := result["tools"].([]interface{})
	if !ok {
		t.Fatalf("Expected tools to be an array")
	}
	
	// Verify we have the expected tools
	expectedTools := []string{
		"add_movie", "get_movie", "update_movie", "delete_movie", "search_movies",
		"list_top_movies", "search_by_decade", "search_by_rating_range",
		"add_actor", "get_actor", "update_actor", "delete_actor",
		"link_actor_to_movie", "get_movie_cast", "get_actor_movies", "search_actors",
	}
	
	toolNames := make(map[string]bool)
	for _, tool := range tools {
		toolObj, ok := tool.(map[string]interface{})
		if !ok {
			continue
		}
		if name, ok := toolObj["name"].(string); ok {
			toolNames[name] = true
		}
	}
	
	for _, expectedTool := range expectedTools {
		if !toolNames[expectedTool] {
			t.Errorf("Expected tool %s not found in tools list", expectedTool)
		}
	}
}

func TestServerIntegration_MovieOperations(t *testing.T) {
	t.Skip("Integration test needs to be updated for new server architecture")
	_, srv := setupIntegrationTest(t)
	
	// Test adding a movie
	addMovieRequest := dto.JSONRPCRequest{
		JSONRPC: "2.0",
		ID:      json.RawMessage(`1`),
		Method:  "tools/call",
		Params: json.RawMessage(`{
			"name": "add_movie",
			"arguments": {
				"title": "Integration Test Movie",
				"director": "Test Director",
				"year": 2023,
				"rating": 8.5,
				"genres": ["Action", "Thriller"],
				"poster_url": "https://example.com/poster.jpg"
			}
		}`),
	}
	
	var output bytes.Buffer
	srv.SetOutput(&output)
	
	srv.HandleRequest(&addMovieRequest)
	
	// Parse add movie response
	var addResponse dto.JSONRPCResponse
	err := json.Unmarshal(output.Bytes(), &addResponse)
	if err != nil {
		t.Fatalf("Failed to parse add movie response: %v", err)
	}
	
	if addResponse.Error != nil {
		t.Fatalf("Failed to add movie: %v", addResponse.Error)
	}
	
	// Extract movie ID from response
	result, ok := addResponse.Result.(map[string]interface{})
	if !ok {
		t.Fatalf("Expected result to be an object")
	}
	
	movieIDFloat, ok := result["id"].(float64)
	if !ok {
		t.Fatalf("Expected movie ID to be a number")
	}
	movieID := int(movieIDFloat)
	
	// Test getting the movie
	getMovieRequest := dto.JSONRPCRequest{
		JSONRPC: "2.0",
		ID:      json.RawMessage(`2`),
		Method:  "tools/call",
		Params: json.RawMessage(`{
			"name": "get_movie",
			"arguments": {
				"movie_id": ` + string(rune(movieID)) + `
			}
		}`),
	}
	
	output.Reset()
	srv.HandleRequest(&getMovieRequest)
	
	// Parse get movie response
	var getResponse dto.JSONRPCResponse
	err = json.Unmarshal(output.Bytes(), &getResponse)
	if err != nil {
		t.Fatalf("Failed to parse get movie response: %v", err)
	}
	
	if getResponse.Error != nil {
		t.Fatalf("Failed to get movie: %v", getResponse.Error)
	}
	
	// Verify movie data
	movieResult, ok := getResponse.Result.(map[string]interface{})
	if !ok {
		t.Fatalf("Expected movie result to be an object")
	}
	
	if movieResult["title"] != "Integration Test Movie" {
		t.Errorf("Expected title 'Integration Test Movie', got %v", movieResult["title"])
	}
	
	if movieResult["director"] != "Test Director" {
		t.Errorf("Expected director 'Test Director', got %v", movieResult["director"])
	}
	
	if movieResult["year"].(float64) != 2023 {
		t.Errorf("Expected year 2023, got %v", movieResult["year"])
	}
	
	if movieResult["rating"].(float64) != 8.5 {
		t.Errorf("Expected rating 8.5, got %v", movieResult["rating"])
	}
	
	// Test updating the movie
	updateMovieRequest := dto.JSONRPCRequest{
		JSONRPC: "2.0",
		ID:      json.RawMessage(`3`),
		Method:  "tools/call",
		Params: json.RawMessage(`{
			"name": "update_movie",
			"arguments": {
				"id": ` + string(rune(movieID)) + `,
				"title": "Updated Integration Test Movie",
				"director": "Updated Test Director",
				"year": 2024,
				"rating": 9.0,
				"genres": ["Drama", "Thriller"]
			}
		}`),
	}
	
	output.Reset()
	srv.HandleRequest(&updateMovieRequest)
	
	// Parse update response
	var updateResponse dto.JSONRPCResponse
	err = json.Unmarshal(output.Bytes(), &updateResponse)
	if err != nil {
		t.Fatalf("Failed to parse update movie response: %v", err)
	}
	
	if updateResponse.Error != nil {
		t.Fatalf("Failed to update movie: %v", updateResponse.Error)
	}
	
	// Verify updated data
	updatedResult, ok := updateResponse.Result.(map[string]interface{})
	if !ok {
		t.Fatalf("Expected updated result to be an object")
	}
	
	if updatedResult["title"] != "Updated Integration Test Movie" {
		t.Errorf("Expected updated title, got %v", updatedResult["title"])
	}
	
	if updatedResult["rating"].(float64) != 9.0 {
		t.Errorf("Expected updated rating 9.0, got %v", updatedResult["rating"])
	}
	
	// Test searching movies
	searchRequest := dto.JSONRPCRequest{
		JSONRPC: "2.0",
		ID:      json.RawMessage(`4`),
		Method:  "tools/call",
		Params: json.RawMessage(`{
			"name": "search_movies",
			"arguments": {
				"title": "Updated Integration",
				"limit": 10
			}
		}`),
	}
	
	output.Reset()
	srv.HandleRequest(&searchRequest)
	
	// Parse search response
	var searchResponse dto.JSONRPCResponse
	err = json.Unmarshal(output.Bytes(), &searchResponse)
	if err != nil {
		t.Fatalf("Failed to parse search response: %v", err)
	}
	
	if searchResponse.Error != nil {
		t.Fatalf("Failed to search movies: %v", searchResponse.Error)
	}
	
	// Verify search results
	searchResult, ok := searchResponse.Result.(map[string]interface{})
	if !ok {
		t.Fatalf("Expected search result to be an object")
	}
	
	movies, ok := searchResult["movies"].([]interface{})
	if !ok {
		t.Fatalf("Expected movies to be an array")
	}
	
	if len(movies) != 1 {
		t.Errorf("Expected 1 movie in search results, got %d", len(movies))
	}
	
	// Test deleting the movie
	deleteRequest := dto.JSONRPCRequest{
		JSONRPC: "2.0",
		ID:      json.RawMessage(`5`),
		Method:  "tools/call",
		Params: json.RawMessage(`{
			"name": "delete_movie",
			"arguments": {
				"movie_id": ` + string(rune(movieID)) + `
			}
		}`),
	}
	
	output.Reset()
	srv.HandleRequest(&deleteRequest)
	
	// Parse delete response
	var deleteResponse dto.JSONRPCResponse
	err = json.Unmarshal(output.Bytes(), &deleteResponse)
	if err != nil {
		t.Fatalf("Failed to parse delete response: %v", err)
	}
	
	if deleteResponse.Error != nil {
		t.Fatalf("Failed to delete movie: %v", deleteResponse.Error)
	}
	
	// Verify movie is deleted
	output.Reset()
	srv.HandleRequest(&getMovieRequest)
	
	var getDeletedResponse dto.JSONRPCResponse
	json.Unmarshal(output.Bytes(), &getDeletedResponse)
	
	if getDeletedResponse.Error == nil {
		t.Error("Expected error when getting deleted movie")
	}
}

func TestServerIntegration_ActorOperations(t *testing.T) {
	t.Skip("Integration test needs to be updated for new server architecture")
	_, srv := setupIntegrationTest(t)
	
	// Test adding an actor
	addActorRequest := dto.JSONRPCRequest{
		JSONRPC: "2.0",
		ID:      json.RawMessage(`1`),
		Method:  "tools/call",
		Params: json.RawMessage(`{
			"name": "add_actor",
			"arguments": {
				"name": "Integration Test Actor",
				"birth_year": 1980,
				"bio": "This is a test actor for integration testing."
			}
		}`),
	}
	
	var output bytes.Buffer
	srv.SetOutput(&output)
	
	srv.HandleRequest(&addActorRequest)
	
	// Parse add actor response
	var addResponse dto.JSONRPCResponse
	err := json.Unmarshal(output.Bytes(), &addResponse)
	if err != nil {
		t.Fatalf("Failed to parse add actor response: %v", err)
	}
	
	if addResponse.Error != nil {
		t.Fatalf("Failed to add actor: %v", addResponse.Error)
	}
	
	// Extract actor ID from response
	result, ok := addResponse.Result.(map[string]interface{})
	if !ok {
		t.Fatalf("Expected result to be an object")
	}
	
	actorIDFloat, ok := result["id"].(float64)
	if !ok {
		t.Fatalf("Expected actor ID to be a number")
	}
	actorID := int(actorIDFloat)
	
	// Test getting the actor
	getActorRequest := dto.JSONRPCRequest{
		JSONRPC: "2.0",
		ID:      json.RawMessage(`2`),
		Method:  "tools/call",
		Params: json.RawMessage(`{
			"name": "get_actor",
			"arguments": {
				"actor_id": ` + string(rune(actorID)) + `
			}
		}`),
	}
	
	output.Reset()
	srv.HandleRequest(&getActorRequest)
	
	// Parse get actor response
	var getResponse dto.JSONRPCResponse
	err = json.Unmarshal(output.Bytes(), &getResponse)
	if err != nil {
		t.Fatalf("Failed to parse get actor response: %v", err)
	}
	
	if getResponse.Error != nil {
		t.Fatalf("Failed to get actor: %v", getResponse.Error)
	}
	
	// Verify actor data
	actorResult, ok := getResponse.Result.(map[string]interface{})
	if !ok {
		t.Fatalf("Expected actor result to be an object")
	}
	
	if actorResult["name"] != "Integration Test Actor" {
		t.Errorf("Expected name 'Integration Test Actor', got %v", actorResult["name"])
	}
	
	if actorResult["birth_year"].(float64) != 1980 {
		t.Errorf("Expected birth year 1980, got %v", actorResult["birth_year"])
	}
	
	if !strings.Contains(actorResult["bio"].(string), "integration testing") {
		t.Errorf("Expected bio to contain 'integration testing', got %v", actorResult["bio"])
	}
}

func TestServerIntegration_ResourcesOperations(t *testing.T) {
	t.Skip("Integration test needs to be updated for new server architecture")
	_, srv := setupIntegrationTest(t)
	
	// Test resources/list request
	resourcesListRequest := dto.JSONRPCRequest{
		JSONRPC: "2.0",
		ID:      json.RawMessage(`1`),
		Method:  "resources/list",
		Params:  json.RawMessage(`{}`),
	}
	
	var output bytes.Buffer
	srv.SetOutput(&output)
	
	srv.HandleRequest(&resourcesListRequest)
	
	// Parse resources list response
	var listResponse dto.JSONRPCResponse
	err := json.Unmarshal(output.Bytes(), &listResponse)
	if err != nil {
		t.Fatalf("Failed to parse resources list response: %v", err)
	}
	
	if listResponse.Error != nil {
		t.Fatalf("Failed to list resources: %v", listResponse.Error)
	}
	
	// Test resources/read request
	resourcesReadRequest := dto.JSONRPCRequest{
		JSONRPC: "2.0",
		ID:      json.RawMessage(`2`),
		Method:  "resources/read",
		Params: json.RawMessage(`{
			"uri": "movies://database/all"
		}`),
	}
	
	output.Reset()
	srv.HandleRequest(&resourcesReadRequest)
	
	// Parse resources read response
	var readResponse dto.JSONRPCResponse
	err = json.Unmarshal(output.Bytes(), &readResponse)
	if err != nil {
		t.Fatalf("Failed to parse resources read response: %v", err)
	}
	
	if readResponse.Error != nil {
		t.Fatalf("Failed to read resource: %v", readResponse.Error)
	}
	
	// Verify response structure
	result, ok := readResponse.Result.(map[string]interface{})
	if !ok {
		t.Fatalf("Expected result to be an object")
	}
	
	contents, ok := result["contents"].([]interface{})
	if !ok {
		t.Fatalf("Expected contents to be an array")
	}
	
	if len(contents) != 1 {
		t.Errorf("Expected 1 content item, got %d", len(contents))
	}
}