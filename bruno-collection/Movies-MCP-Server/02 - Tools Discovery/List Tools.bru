meta {
  name: List Tools
  type: http
  seq: 1
}

post {
  url: {{base_url}}/mcp
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  Accept: application/json
}

body:json {
  {
    "jsonrpc": "2.0",
    "id": 3,
    "method": "tools/list",
    "params": {}
  }
}

tests {
  test("Status code is 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is valid JSON-RPC", function() {
    expect(res.getBody()).to.have.property('jsonrpc', '2.0');
    expect(res.getBody()).to.have.property('id', 3);
    expect(res.getBody()).to.have.property('result');
  });
  
  test("Tools array returned", function() {
    const result = res.getBody().result;
    expect(result).to.have.property('tools');
    expect(result.tools).to.be.an('array');
    expect(result.tools).to.have.length.greaterThan(0);
  });
  
  test("Required tools are present", function() {
    const tools = res.getBody().result.tools;
    const toolNames = tools.map(tool => tool.name);
    
    expect(toolNames).to.include('get_movie');
    expect(toolNames).to.include('add_movie');
    expect(toolNames).to.include('update_movie');
    expect(toolNames).to.include('delete_movie');
    expect(toolNames).to.include('search_movies');
    expect(toolNames).to.include('list_top_movies');
  });
  
  test("Tools have required properties", function() {
    const tools = res.getBody().result.tools;
    
    tools.forEach(tool => {
      expect(tool).to.have.property('name');
      expect(tool).to.have.property('description');
      expect(tool).to.have.property('inputSchema');
      expect(tool.inputSchema).to.have.property('type', 'object');
    });
  });
}

docs {
  # List Available Tools
  
  This request retrieves the list of all available tools from the Movies MCP Server.
  
  ## Expected Tools
  
  - `get_movie` - Retrieve a movie by ID
  - `add_movie` - Add a new movie to the database
  - `update_movie` - Update an existing movie
  - `delete_movie` - Delete a movie from the database
  - `search_movies` - Search for movies with various criteria
  - `list_top_movies` - List top-rated movies
  
  ## Expected Response Structure
  
  ```json
  {
    "jsonrpc": "2.0",
    "id": 3,
    "result": {
      "tools": [
        {
          "name": "get_movie",
          "description": "Get a movie by ID",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The movie ID"
              }
            },
            "required": ["id"]
          }
        }
        // ... more tools
      ]
    }
  }
  ```
}