# ==============================================================================
# Docker Compose for Movies MCP Server - Clean Architecture
# ==============================================================================

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: movies-mcp-postgres-clean
    restart: unless-stopped
    environment:
      POSTGRES_DB: movies_mcp
      POSTGRES_USER: movies_user
      POSTGRES_PASSWORD: movies_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    ports:
      - "5433:5432"  # Different port to avoid conflicts with legacy version
    volumes:
      - postgres_data_clean:/var/lib/postgresql/data
      - ./testdata/seed_data.sql:/docker-entrypoint-initdb.d/01-seed.sql:ro
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
    networks:
      - movies-network-clean
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U movies_user -d movies_mcp"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Movies MCP Server (Clean Architecture)
  movies-mcp-server-clean:
    build:
      context: .
      dockerfile: Dockerfile.clean
      args:
        VERSION: 0.2.0
        BUILD_TIME: ${BUILD_TIME:-$(date -u +%Y-%m-%dT%H:%M:%SZ)}
        GIT_COMMIT: ${GIT_COMMIT:-$(git rev-parse --short HEAD || echo 'unknown')}
    container_name: movies-mcp-server-clean
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: movies_mcp
      DB_USER: movies_user
      DB_PASSWORD: movies_password
      DB_SSLMODE: disable
      DB_MAX_OPEN_CONNS: 25
      DB_MAX_IDLE_CONNS: 5
      DB_CONN_MAX_LIFETIME: 1h
      
      # Server configuration
      LOG_LEVEL: debug
      SERVER_TIMEOUT: 30s
      
      # Image processing
      MAX_IMAGE_SIZE: 5242880
      ALLOWED_IMAGE_TYPES: image/jpeg,image/png,image/webp
      ENABLE_THUMBNAILS: true
      THUMBNAIL_SIZE: 200x200
      
      # Monitoring
      METRICS_ENABLED: true
      METRICS_INTERVAL: 30s
    ports:
      - "8081:8080"  # Different port for health check
    networks:
      - movies-network-clean
    volumes:
      # Mount for development (optional, remove in production)
      - type: bind
        source: ./testdata
        target: /testdata
        read_only: true
    healthcheck:
      test: ["CMD", "sh", "-c", "ps aux | grep movies-server | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Migration service (runs once to apply migrations)
  migrations:
    build:
      context: .
      dockerfile: Dockerfile.clean
    container_name: movies-mcp-migrations
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: movies_mcp
      DB_USER: movies_user
      DB_PASSWORD: movies_password
      DB_SSLMODE: disable
    networks:
      - movies-network-clean
    entrypoint: ["/usr/local/bin/migrate"]
    command: ["postgres://movies_user:movies_password@postgres:5432/movies_mcp?sslmode=disable", "/migrations", "up"]
    restart: "no"

  # Redis (for caching and session management)
  redis-clean:
    image: redis:7-alpine
    container_name: movies-mcp-redis-clean
    restart: unless-stopped
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis_data_clean:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - movies-network-clean
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus (for metrics collection) - Clean Architecture
  prometheus-clean:
    image: prom/prometheus:latest
    container_name: movies-mcp-prometheus-clean
    restart: unless-stopped
    ports:
      - "9091:9090"  # Different port
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_clean:/prometheus
    networks:
      - movies-network-clean
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana (for metrics visualization) - Clean Architecture
  grafana-clean:
    image: grafana/grafana:latest
    container_name: movies-mcp-grafana-clean
    restart: unless-stopped
    ports:
      - "3001:3000"  # Different port
    volumes:
      - grafana_data_clean:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - movies-network-clean
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_SERVER_DOMAIN: localhost:3001

  # pgAdmin (for database management) - Clean Architecture
  pgadmin-clean:
    image: dpage/pgadmin4:latest
    container_name: movies-mcp-pgadmin-clean
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGLADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5051:80"  # Different port
    volumes:
      - pgadmin_data_clean:/var/lib/pgadmin
      - ./docker/pgadmin_servers.json:/pgladmin4/servers.json:ro
    networks:
      - movies-network-clean
    depends_on:
      - postgres

# Volumes for persistent data (separate from legacy)
volumes:
  postgres_data_clean:
    driver: local
  redis_data_clean:
    driver: local
  prometheus_data_clean:
    driver: local
  grafana_data_clean:
    driver: local
  pgadmin_data_clean:
    driver: local

# Network for service communication (separate from legacy)
networks:
  movies-network-clean:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16