name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [ main ]
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'
  REGISTRY: ghcr.io
  IMAGE_NAME: francknouama/movies-mcp-server

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  check-ci-success:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Check CI status
        if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion != 'success'
        run: |
          echo "CI Pipeline failed or was cancelled"
          exit 1
          
  release:
    runs-on: ubuntu-latest
    needs: [check-ci-success]
    if: always() && (needs.check-ci-success.result == 'success' || github.event_name != 'workflow_run')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true
          version: latest
          
      - name: Run GoReleaser (Snapshot)
        if: github.ref_type != 'tag'
        run: |
          goreleaser release --snapshot --clean --skip=publish,announce
          
      - name: Run GoReleaser (Release)
        if: github.ref_type == 'tag'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          goreleaser release --clean
          
      - name: Upload Artifacts (Snapshot)
        if: github.ref_type != 'tag'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-snapshot
          path: dist/*.tar.gz
          retention-days: 7
          
  test-binaries:
    runs-on: ${{ matrix.os }}
    needs: release
    if: github.ref_type != 'tag'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: movies-mcp-server_*_Linux_x86_64.tar.gz
            binary_name: movies-server
          - os: macos-latest
            artifact_name: movies-mcp-server_*_Darwin_x86_64.tar.gz
            binary_name: movies-server
          - os: windows-latest
            artifact_name: movies-mcp-server_*_Windows_x86_64.tar.gz
            binary_name: movies-server.exe
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries-snapshot
          path: ./dist
          
      - name: Extract and test binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd dist
          tar -xzf ${{ matrix.artifact_name }}
          ./${{ matrix.binary_name }} --version
          ./${{ matrix.binary_name }} --help
          
      - name: Extract and test binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd dist
          $tarFile = Get-ChildItem -Path "*Windows*x86_64.tar.gz" | Select-Object -First 1
          tar -xzf $tarFile.Name
          .\${{ matrix.binary_name }} --version
          .\${{ matrix.binary_name }} --help

  docker-build:
    runs-on: ubuntu-latest
    needs: [check-ci-success]
    if: always() && (needs.check-ci-success.result == 'success' || github.event_name != 'workflow_run')
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: movies_mcp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./mcp-server/Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: movies_mcp_test
          DB_SSLMODE: disable
        run: |
          # Pull and test the built image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          
          # Run the container
          docker run -d --name test-container \
            --network host \
            -e DB_HOST=$DB_HOST \
            -e DB_PORT=$DB_PORT \
            -e DB_USER=$DB_USER \
            -e DB_PASSWORD=$DB_PASSWORD \
            -e DB_NAME=$DB_NAME \
            -e DB_SSLMODE=$DB_SSLMODE \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          
          # Wait for server to start
          sleep 10
          
          # Test MCP protocol
          echo '{"jsonrpc": "2.0", "method": "initialize", "params": {"protocolVersion": "0.1.0", "capabilities": {"tools": {}}}, "id": 1}' | \
            docker exec -i test-container sh -c 'cat > /tmp/test.json && cat /tmp/test.json' | \
            docker logs test-container
          
          # Cleanup
          docker stop test-container
          docker rm test-container