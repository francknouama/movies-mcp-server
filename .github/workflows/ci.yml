name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      mcp-server: ${{ steps.changes.outputs.mcp-server }}
      shared-mcp: ${{ steps.changes.outputs.shared-mcp }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            mcp-server:
              - 'mcp-server/**'
              - 'shared-mcp/**'
              - 'go.work'
            shared-mcp:
              - 'shared-mcp/**'
              - 'go.work'

  test-shared-mcp:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.shared-mcp == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-shared-${{ hashFiles('shared-mcp/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-shared-
            
      - name: Install dependencies
        working-directory: shared-mcp
        run: go mod download
        
      - name: Run tests
        working-directory: shared-mcp
        run: go test -v -race -coverprofile=coverage.out ./...
        
      - name: Generate coverage report
        working-directory: shared-mcp
        run: go tool cover -html=coverage.out -o coverage.html
        
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: shared-mcp-coverage
          path: shared-mcp/coverage.html

  test-mcp-server:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.mcp-server == 'true'
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: movies_mcp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: movies_mcp_test
      DB_SSLMODE: disable
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-mcp-${{ hashFiles('mcp-server/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mcp-
            
      - name: Install dependencies
        working-directory: mcp-server
        run: go mod download
        
      - name: Build application
        working-directory: mcp-server
        run: go build -o build/movies-server cmd/server/main.go
        
      - name: Run database migrations
        working-directory: mcp-server
        run: ./build/movies-server -migrate-only
          
      - name: Run unit tests
        working-directory: mcp-server
        run: go test -v -race -coverprofile=coverage.out $(go list ./... | grep -v tests/bdd)
        
      - name: Run integration tests
        working-directory: mcp-server
        run: go test -v -tags=integration ./tests/integration/...
        
      - name: Generate coverage report
        working-directory: mcp-server
        run: go tool cover -html=coverage.out -o coverage.html
        
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: mcp-server-coverage
          path: mcp-server/coverage.html
          
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: mcp-server-binary
          path: mcp-server/build/movies-server


  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Run golangci-lint for shared-mcp
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: shared-mcp
          args: --config=.golangci.yml
          
      - name: Run golangci-lint for mcp-server
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: mcp-server
          args: --config=.golangci.yml

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./...
          
      - name: Run Nancy vulnerability scanner
        run: |
          go install github.com/sonatype-nexus-community/nancy@latest
          go list -json -deps ./... | nancy sleuth

  validate-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Verify go.work consistency
        run: |
          go work sync
          git diff --exit-code go.work
          
      - name: Install go-mod-outdated
        run: go install github.com/psampaz/go-mod-outdated@latest
          
      - name: Check for outdated dependencies
        run: |
          cd mcp-server && go list -u -m -json all | go-mod-outdated -update -direct
          cd ../shared-mcp && go list -u -m -json all | go-mod-outdated -update -direct